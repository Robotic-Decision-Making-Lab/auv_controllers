// Copyright 2024, Evan Palmer, Colin Mitchell, Everardo Gonzalez, Rakesh Vivekanandan
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <Eigen/Dense>
#include <cstddef>
#include <iostream>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#include "controller_interface/chainable_controller_interface.hpp"
#include "controller_interface/controller_interface.hpp"
#include "geometry_msgs/msg/wrench.hpp"
#include "hydrodynamics/eigen.hpp"
#include "rclcpp/rclcpp.hpp"
#include "realtime_tools/realtime_buffer.h"
#include "realtime_tools/realtime_publisher.h"
#include "thruster_allocation_matrix_controller/visibility_control.h"

// auto-generated by generate_parameter_library
#include "thruster_allocation_matrix_controller_parameters.hpp"

namespace thruster_allocation_matrix_controller
{

class ThrusterAllocationMatrixController : public controller_interface::ChainableControllerInterface
{
public:
  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  ThrusterAllocationMatrixController() = default;

  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_init() override;

  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_cleanup(const rclcpp_lifecycle::State & previous_state) override;

  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_configure(const rclcpp_lifecycle::State & previous_state) override;

  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_activate(const rclcpp_lifecycle::State & previous_state) override;

  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_deactivate(const rclcpp_lifecycle::State & previous_state) override;

  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  controller_interface::return_type update_and_write_commands(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  THRUSTER_ALLOCATION_MATRIX_CONTROLLER_PUBLIC
  bool on_set_chained_mode(bool chained_mode) override;

protected:
  std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;

  controller_interface::return_type update_reference_from_subscribers(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  void update_parameters();

  controller_interface::CallbackReturn configure_parameters();

  // Reference signal to track
  realtime_tools::RealtimeBuffer<std::shared_ptr<geometry_msgs::msg::Wrench>> reference_;
  std::shared_ptr<rclcpp::Subscription<geometry_msgs::msg::Wrench>> reference_sub_;

  // generate_parameter_library members
  std::shared_ptr<thruster_allocation_matrix_controller::ParamListener> param_listener_;
  thruster_allocation_matrix_controller::Params params_;

  Eigen::MatrixXd tam_;
  size_t num_thrusters_;

private:
  std::array<std::string, 6> dof_names_{"x", "y", "z", "rx", "ry", "rz"};
  size_t dof_{6};
};

}  // namespace thruster_allocation_matrix_controller
