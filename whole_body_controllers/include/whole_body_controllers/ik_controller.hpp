// Copyright 2025, Evan Palmer
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "controller_interface/chainable_controller_interface.hpp"
#include "controller_interface/controller_interface.hpp"
#include "geometry_msgs/msg/pose_stamped.hpp"
#include "pinocchio/algorithm/joint-configuration.hpp"
#include "pinocchio/algorithm/kinematics.hpp"
#include "pluginlib/class_loader.hpp"
#include "rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp"
#include "realtime_tools/realtime_buffer.hpp"
#include "realtime_tools/realtime_publisher.hpp"
#include "std_msgs/msg/string.hpp"
#include "tf2_ros/buffer.h"
#include "tf2_ros/transform_listener.h"
#include "whole_body_controllers/solvers/ik_solver.hpp"

// auto-generated by generate_parameter_library
#include <whole_body_controllers/ik_controller_parameters.hpp>

namespace whole_body_controllers
{

class IKController : public controller_interface::ChainableControllerInterface
{
public:
  IKController() = default;

  auto on_init() -> controller_interface::CallbackReturn override;

  // NOLINTNEXTLINE(modernize-use-nodiscard)
  auto command_interface_configuration() const -> controller_interface::InterfaceConfiguration override;

  // NOLINTNEXTLINE(modernize-use-nodiscard)
  auto state_interface_configuration() const -> controller_interface::InterfaceConfiguration override;

  auto on_configure(const rclcpp_lifecycle::State & previous_state) -> controller_interface::CallbackReturn override;

  auto on_activate(const rclcpp_lifecycle::State & previous_state) -> controller_interface::CallbackReturn override;

  auto update_and_write_commands(const rclcpp::Time & time, const rclcpp::Duration & period)
    -> controller_interface::return_type override;

protected:
  auto on_export_reference_interfaces() -> std::vector<hardware_interface::CommandInterface> override;

  auto update_reference_from_subscribers(const rclcpp::Time & time, const rclcpp::Duration & period)
    -> controller_interface::return_type override;

  auto update_system_state_values() -> controller_interface::return_type;

  auto update_parameters() -> void;

  auto configure_parameters() -> controller_interface::CallbackReturn;

  [[nodiscard]] auto transform_goal(const geometry_msgs::msg::PoseStamped & goal, const std::string & target_frame)
    const -> geometry_msgs::msg::PoseStamped;

  std::shared_ptr<pinocchio::Model> model_;
  std::shared_ptr<pinocchio::Data> data_;

  realtime_tools::RealtimeBuffer<geometry_msgs::msg::PoseStamped> reference_;
  std::shared_ptr<rclcpp::Subscription<geometry_msgs::msg::PoseStamped>> reference_sub_;

  std::vector<double> system_state_values_;

  std::shared_ptr<rclcpp::Subscription<std_msgs::msg::String>> robot_description_sub_;

  std::unique_ptr<pluginlib::ClassLoader<ik_solvers::IKSolver>> ik_solver_loader_;
  std::shared_ptr<ik_solvers::IKSolver> ik_solver_;

  std::unique_ptr<tf2_ros::Buffer> tf_buffer_;
  std::unique_ptr<tf2_ros::TransformListener> tf_listener_;

  std::unique_ptr<ik_controller::ParamListener> param_listener_;
  ik_controller::Params params_;

  bool model_initialized_{false};

  std::array<std::string, 7> free_flyer_dofs_{"x", "y", "z", "qx", "qy", "qz", "qw"};
  std::array<std::string, 6> free_flyer_vel_dofs_{"vx", "vy", "vz", "wx", "wy", "wz"};
  std::vector<std::string> dofs_, vel_dofs_, manipulator_dofs_;
  std::size_t n_dofs_, n_manipulator_dofs_, n_vel_dofs_;
};

}  // namespace whole_body_controllers
