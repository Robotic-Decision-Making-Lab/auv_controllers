// Copyright 2025, Evan Palmer
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "controller_manager_msgs/srv/configure_controller.hpp"
#include "controller_manager_msgs/srv/list_controllers.hpp"
#include "controller_manager_msgs/srv/load_controller.hpp"
#include "controller_manager_msgs/srv/set_hardware_component_state.hpp"
#include "controller_manager_msgs/srv/switch_controller.hpp"
#include "controller_manager_msgs/srv/unload_controller.hpp"
#include "rclcpp/rclcpp.hpp"
#include "std_srvs/srv/set_bool.hpp"

// auto-generated by generate_parameter_library
#include <controller_coordinator/controller_coordinator_parameters.hpp>

namespace coordinator
{

class ControllerCoordinator : public rclcpp::Node
{
public:
  ControllerCoordinator();

  ~ControllerCoordinator() override = default;

private:
  // we need clients to:
  // 1. activate/deactivate the hardware interfaces
  // 2. activate/deactivate the controllers
  std::shared_ptr<rclcpp::Client<controller_manager_msgs::srv::SetHardwareComponentState>> hardware_client_;
  std::shared_ptr<rclcpp::Client<controller_manager_msgs::srv::SwitchController>> switch_controller_client_;

  // create a user-facing service that will allow users to activate/deactivate the hardware and all controllers
  std::shared_ptr<rclcpp::Service<std_srvs::srv::SetBool>> activate_system_service_;

  // pre-configure the activate/deactivate service messages
  // these won't change, so we can set them up once
  using HardwareRequest = controller_manager_msgs::srv::SetHardwareComponentState::Request;
  std::vector<std::shared_ptr<HardwareRequest>> activate_hardware_requests_;
  std::vector<std::shared_ptr<HardwareRequest>> deactivate_hardware_requests_;

  using ControllerRequest = controller_manager_msgs::srv::SwitchController::Request;
  std::shared_ptr<ControllerRequest> activate_controllers_request_;
  std::shared_ptr<ControllerRequest> deactivate_controllers_request_;

  std::shared_ptr<controller_coordinator::ParamListener> param_listener_;
  controller_coordinator::Params params_;

  // we need separate callback groups for the clients and service
  std::shared_ptr<rclcpp::CallbackGroup> service_callback_group_;
  std::shared_ptr<rclcpp::CallbackGroup> client_callback_group_;
};

}  // namespace coordinator
