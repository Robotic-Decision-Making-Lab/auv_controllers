// Copyright 2025, Evan Palmer
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <Eigen/Dense>

#include "auv_control_msgs/msg/impedance_command.hpp"
#include "control_msgs/msg/multi_dof_state_stamped.hpp"
#include "controller_interface/chainable_controller_interface.hpp"
#include "controller_interface/controller_interface.hpp"
#include "hydrodynamics/hydrodynamics.hpp"
#include "nav_msgs/msg/odometry.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_buffer.hpp"
#include "realtime_tools/realtime_publisher.hpp"
#include "std_msgs/msg/string.hpp"
#include "tf2_ros/buffer.h"
#include "tf2_ros/transform_listener.h"

// auto-generated by generate_parameter_library
#include <impedance_controller/impedance_controller_parameters.hpp>

namespace impedance_controller
{

class ImpedanceController : public controller_interface::ChainableControllerInterface
{
public:
  ImpedanceController() = default;

  auto on_init() -> controller_interface::CallbackReturn override;

  auto on_configure(const rclcpp_lifecycle::State & previous_state) -> controller_interface::CallbackReturn override;

  auto on_activate(const rclcpp_lifecycle::State & previous_state) -> controller_interface::CallbackReturn override;

  auto command_interface_configuration() const -> controller_interface::InterfaceConfiguration override;

  auto state_interface_configuration() const -> controller_interface::InterfaceConfiguration override;

  auto update_and_write_commands(const rclcpp::Time & time, const rclcpp::Duration & period)
    -> controller_interface::return_type override;

protected:
  auto on_export_reference_interfaces() -> std::vector<hardware_interface::CommandInterface> override;

  auto update_reference_from_subscribers(const rclcpp::Time & time, const rclcpp::Duration & period)
    -> controller_interface::return_type override;

  auto update_system_state_values() -> controller_interface::return_type;

  auto update_parameters() -> void;

  auto configure_parameters() -> controller_interface::CallbackReturn;

  auto update_and_validate_interfaces() -> controller_interface::return_type;

  // provide an interface for setting reference commands from a topic
  // this is helpful when we want to set the reference using a non-ros2_control interface
  realtime_tools::RealtimeBuffer<auv_control_msgs::msg::ImpedanceCommand> reference_;
  std::shared_ptr<rclcpp::Subscription<auv_control_msgs::msg::ImpedanceCommand>> reference_sub_;

  realtime_tools::RealtimeBuffer<nav_msgs::msg::Odometry> system_state_;
  std::shared_ptr<rclcpp::Subscription<nav_msgs::msg::Odometry>> system_state_sub_;
  std::vector<double> system_state_values_;

  using ControllerState = control_msgs::msg::MultiDOFStateStamped;
  std::shared_ptr<rclcpp::Publisher<ControllerState>> controller_state_pub_;
  std::unique_ptr<realtime_tools::RealtimePublisher<ControllerState>> rt_controller_state_pub_;
  ControllerState controller_state_;

  std::shared_ptr<impedance_controller::ParamListener> param_listener_;
  impedance_controller::Params params_;

  // the dofs are passed as a parameter to the controller
  // we could make these static, but there may be scenarios where users want to rename the interfaces
  std::vector<std::string> command_dofs_, state_dofs_;
  std::size_t n_command_dofs_, n_state_dofs_, n_reference_dofs_;

  // controller gains
  Eigen::Matrix6d kp_, kd_;

  rclcpp::Logger logger_{rclcpp::get_logger("impedance_controller")};
};

}  // namespace impedance_controller
