// Copyright 2024, Evan Palmer
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <Eigen/Dense>
#include <memory>
#include <string>
#include <vector>

#include "control_msgs/msg/multi_dof_command.hpp"
#include "control_msgs/msg/multi_dof_state_stamped.hpp"
#include "controller_interface/chainable_controller_interface.hpp"
#include "controller_interface/controller_interface.hpp"
#include "geometry_msgs/msg/quaternion.hpp"
#include "hydrodynamics/eigen.hpp"
#include "hydrodynamics/hydrodynamics.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_buffer.h"
#include "realtime_tools/realtime_publisher.h"
#include "velocity_controllers/visibility_control.h"

// auto-generated by generate_parameter_library
#include "integral_sliding_mode_controller_parameters.hpp"

namespace velocity_controllers
{

/**
 * @brief Integral sliding mode controller (ISMC) for velocity control of an autonomous underwater vehicle.
 */
class IntegralSlidingModeController : public controller_interface::ChainableControllerInterface
{
public:
  VELOCITY_CONTROLLERS_PUBLIC
  IntegralSlidingModeController() = default;

  VELOCITY_CONTROLLERS_PUBLIC controller_interface::CallbackReturn on_init() override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::CallbackReturn on_cleanup(const rclcpp_lifecycle::State & previous_state) override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::CallbackReturn on_configure(const rclcpp_lifecycle::State & previous_state) override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::CallbackReturn on_activate(const rclcpp_lifecycle::State & previous_state) override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::CallbackReturn on_deactivate(const rclcpp_lifecycle::State & previous_state) override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::return_type update_and_write_commands(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  VELOCITY_CONTROLLERS_PUBLIC
  bool on_set_chained_mode(bool chained_mode) override;

protected:
  std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;

  controller_interface::return_type update_reference_from_subscribers(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  controller_interface::return_type update_system_state_values();

  void update_parameters();

  controller_interface::CallbackReturn configure_parameters();

  // DOF information
  const std::array<std::string, 6> six_dof_names_{"x", "y", "z", "rx", "ry", "rz"};
  std::vector<std::string> dof_names_;
  size_t dof_;

  // Reference signal to track
  realtime_tools::RealtimeBuffer<std::shared_ptr<control_msgs::msg::MultiDOFCommand>> reference_;
  std::shared_ptr<rclcpp::Subscription<control_msgs::msg::MultiDOFCommand>> reference_sub_;

  // The system state: this should include the current system velocity and acceleration
  realtime_tools::RealtimeBuffer<std::shared_ptr<control_msgs::msg::MultiDOFCommand>> system_state_;
  std::shared_ptr<rclcpp::Subscription<control_msgs::msg::MultiDOFCommand>> system_state_sub_;
  std::vector<double> system_state_values_;

  // We need the system rotation from the inertial frame to the vehicle frame for the hydrodynamic model. This isn't
  // read from a state interface because of the disjoint between the state used for error calculation and the rotation
  // which needs a specific set of dof data.
  realtime_tools::RealtimeBuffer<Eigen::Quaterniond> system_rotation_;
  std::shared_ptr<rclcpp::Subscription<geometry_msgs::msg::Quaternion>> system_rotation_sub_;

  // Publish the controller state
  std::shared_ptr<rclcpp::Publisher<control_msgs::msg::MultiDOFStateStamped>> controller_state_pub_;
  std::unique_ptr<realtime_tools::RealtimePublisher<control_msgs::msg::MultiDOFStateStamped>> rt_controller_state_pub_;

  // generate_parameter_library members
  std::shared_ptr<integral_sliding_mode_controller::ParamListener> param_listener_;
  integral_sliding_mode_controller::Params params_;

  // Controller gains
  Eigen::Matrix6d proportional_gain_;
  double sliding_gain_;
  double boundary_thickness_;

  // Error terms
  bool first_update_{true};
  Eigen::Vector6d initial_velocity_error_;
  Eigen::Vector6d total_velocity_error_;

  // Hydrodynamic model
  std::unique_ptr<hydrodynamics::Inertia> inertia_;
  std::unique_ptr<hydrodynamics::Coriolis> coriolis_;
  std::unique_ptr<hydrodynamics::Damping> damping_;
  std::unique_ptr<hydrodynamics::RestoringForces> restoring_forces_;

private:
  VELOCITY_CONTROLLERS_LOCAL
  void reference_callback(std::shared_ptr<control_msgs::msg::MultiDOFCommand> msg);

  VELOCITY_CONTROLLERS_LOCAL
  void state_callback(std::shared_ptr<control_msgs::msg::MultiDOFCommand> msg);
};

}  // namespace velocity_controllers
